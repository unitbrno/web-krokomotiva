// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

/*
	Package trip is a generated protocol buffer package.

	It is generated from these files:
		proto.proto

	It has these top-level messages:
		Version
		PlaceRequest
		Places
		Place
		DirectionRequest
		Directions
		Direction
*/
package trip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import core "github.com/gelidus/web-krokomotiva/core"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{0} }

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PlaceRequest struct {
	Radius    uint32  `protobuf:"varint,1,opt,name=radius,proto3" json:"radius,omitempty"`
	PlaceType string  `protobuf:"bytes,2,opt,name=placeType,proto3" json:"placeType,omitempty"`
	Lng       float64 `protobuf:"fixed64,3,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat       float64 `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
	PriceMin  string  `protobuf:"bytes,5,opt,name=priceMin,proto3" json:"priceMin,omitempty"`
	PriceMax  string  `protobuf:"bytes,6,opt,name=priceMax,proto3" json:"priceMax,omitempty"`
	Token     string  `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *PlaceRequest) Reset()                    { *m = PlaceRequest{} }
func (m *PlaceRequest) String() string            { return proto.CompactTextString(m) }
func (*PlaceRequest) ProtoMessage()               {}
func (*PlaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{1} }

func (m *PlaceRequest) GetRadius() uint32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *PlaceRequest) GetPlaceType() string {
	if m != nil {
		return m.PlaceType
	}
	return ""
}

func (m *PlaceRequest) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *PlaceRequest) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *PlaceRequest) GetPriceMin() string {
	if m != nil {
		return m.PriceMin
	}
	return ""
}

func (m *PlaceRequest) GetPriceMax() string {
	if m != nil {
		return m.PriceMax
	}
	return ""
}

func (m *PlaceRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Places struct {
	Places    []*Place `protobuf:"bytes,1,rep,name=places" json:"places,omitempty"`
	NextToken string   `protobuf:"bytes,2,opt,name=nextToken,proto3" json:"nextToken,omitempty"`
}

func (m *Places) Reset()                    { *m = Places{} }
func (m *Places) String() string            { return proto.CompactTextString(m) }
func (*Places) ProtoMessage()               {}
func (*Places) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{2} }

func (m *Places) GetPlaces() []*Place {
	if m != nil {
		return m.Places
	}
	return nil
}

func (m *Places) GetNextToken() string {
	if m != nil {
		return m.NextToken
	}
	return ""
}

type Place struct {
	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PriceLevel int32   `protobuf:"varint,2,opt,name=priceLevel,proto3" json:"priceLevel,omitempty"`
	Rating     float32 `protobuf:"fixed32,3,opt,name=rating,proto3" json:"rating,omitempty"`
	PlaceID    string  `protobuf:"bytes,4,opt,name=placeID,proto3" json:"placeID,omitempty"`
	IconURL    string  `protobuf:"bytes,5,opt,name=iconURL,proto3" json:"iconURL,omitempty"`
	Address    string  `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Lat        float64 `protobuf:"fixed64,7,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng        float64 `protobuf:"fixed64,8,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *Place) Reset()                    { *m = Place{} }
func (m *Place) String() string            { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()               {}
func (*Place) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{3} }

func (m *Place) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Place) GetPriceLevel() int32 {
	if m != nil {
		return m.PriceLevel
	}
	return 0
}

func (m *Place) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *Place) GetPlaceID() string {
	if m != nil {
		return m.PlaceID
	}
	return ""
}

func (m *Place) GetIconURL() string {
	if m != nil {
		return m.IconURL
	}
	return ""
}

func (m *Place) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Place) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Place) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type DirectionRequest struct {
	Mode          string   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	DepartureTime int64    `protobuf:"varint,2,opt,name=departureTime,proto3" json:"departureTime,omitempty"`
	Locations     []string `protobuf:"bytes,3,rep,name=locations" json:"locations,omitempty"`
}

func (m *DirectionRequest) Reset()                    { *m = DirectionRequest{} }
func (m *DirectionRequest) String() string            { return proto.CompactTextString(m) }
func (*DirectionRequest) ProtoMessage()               {}
func (*DirectionRequest) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{4} }

func (m *DirectionRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *DirectionRequest) GetDepartureTime() int64 {
	if m != nil {
		return m.DepartureTime
	}
	return 0
}

func (m *DirectionRequest) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

type Directions struct {
	Directions []*Direction `protobuf:"bytes,1,rep,name=directions" json:"directions,omitempty"`
}

func (m *Directions) Reset()                    { *m = Directions{} }
func (m *Directions) String() string            { return proto.CompactTextString(m) }
func (*Directions) ProtoMessage()               {}
func (*Directions) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{5} }

func (m *Directions) GetDirections() []*Direction {
	if m != nil {
		return m.Directions
	}
	return nil
}

type Direction struct {
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Direction) Reset()                    { *m = Direction{} }
func (m *Direction) String() string            { return proto.CompactTextString(m) }
func (*Direction) ProtoMessage()               {}
func (*Direction) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{6} }

func (m *Direction) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Version)(nil), "trip.Version")
	proto.RegisterType((*PlaceRequest)(nil), "trip.PlaceRequest")
	proto.RegisterType((*Places)(nil), "trip.Places")
	proto.RegisterType((*Place)(nil), "trip.Place")
	proto.RegisterType((*DirectionRequest)(nil), "trip.DirectionRequest")
	proto.RegisterType((*Directions)(nil), "trip.Directions")
	proto.RegisterType((*Direction)(nil), "trip.Direction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TripService service

type TripServiceClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error)
	GimmePlaces(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*Places, error)
	GetDirections(ctx context.Context, in *DirectionRequest, opts ...grpc.CallOption) (*Directions, error)
	Check(ctx context.Context, in *core.HealthCheckRequest, opts ...grpc.CallOption) (*core.HealthCheckResponse, error)
}

type tripServiceClient struct {
	cc *grpc.ClientConn
}

func NewTripServiceClient(cc *grpc.ClientConn) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/trip.TripService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GimmePlaces(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*Places, error) {
	out := new(Places)
	err := grpc.Invoke(ctx, "/trip.TripService/GimmePlaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetDirections(ctx context.Context, in *DirectionRequest, opts ...grpc.CallOption) (*Directions, error) {
	out := new(Directions)
	err := grpc.Invoke(ctx, "/trip.TripService/GetDirections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) Check(ctx context.Context, in *core.HealthCheckRequest, opts ...grpc.CallOption) (*core.HealthCheckResponse, error) {
	out := new(core.HealthCheckResponse)
	err := grpc.Invoke(ctx, "/trip.TripService/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TripService service

type TripServiceServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*Version, error)
	GimmePlaces(context.Context, *PlaceRequest) (*Places, error)
	GetDirections(context.Context, *DirectionRequest) (*Directions, error)
	Check(context.Context, *core.HealthCheckRequest) (*core.HealthCheckResponse, error)
}

func RegisterTripServiceServer(s *grpc.Server, srv TripServiceServer) {
	s.RegisterService(&_TripService_serviceDesc, srv)
}

func _TripService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trip.TripService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GimmePlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GimmePlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trip.TripService/GimmePlaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GimmePlaces(ctx, req.(*PlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetDirections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetDirections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trip.TripService/GetDirections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetDirections(ctx, req.(*DirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trip.TripService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).Check(ctx, req.(*core.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TripService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trip.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _TripService_GetVersion_Handler,
		},
		{
			MethodName: "GimmePlaces",
			Handler:    _TripService_GimmePlaces_Handler,
		},
		{
			MethodName: "GetDirections",
			Handler:    _TripService_GetDirections_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _TripService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *PlaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Radius != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Radius))
	}
	if len(m.PlaceType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.PlaceType)))
		i += copy(dAtA[i:], m.PlaceType)
	}
	if m.Lng != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i += 8
	}
	if m.Lat != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if len(m.PriceMin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.PriceMin)))
		i += copy(dAtA[i:], m.PriceMin)
	}
	if len(m.PriceMax) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.PriceMax)))
		i += copy(dAtA[i:], m.PriceMax)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *Places) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Places) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Places) > 0 {
		for _, msg := range m.Places {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NextToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.NextToken)))
		i += copy(dAtA[i:], m.NextToken)
	}
	return i, nil
}

func (m *Place) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Place) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PriceLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.PriceLevel))
	}
	if m.Rating != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i += 4
	}
	if len(m.PlaceID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.PlaceID)))
		i += copy(dAtA[i:], m.PlaceID)
	}
	if len(m.IconURL) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.IconURL)))
		i += copy(dAtA[i:], m.IconURL)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Lat != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Lng != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i += 8
	}
	return i, nil
}

func (m *DirectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.DepartureTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.DepartureTime))
	}
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Directions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Directions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Directions) > 0 {
		for _, msg := range m.Directions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Direction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Direction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Version) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *PlaceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Radius != 0 {
		n += 1 + sovProto(uint64(m.Radius))
	}
	l = len(m.PlaceType)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Lng != 0 {
		n += 9
	}
	if m.Lat != 0 {
		n += 9
	}
	l = len(m.PriceMin)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.PriceMax)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *Places) Size() (n int) {
	var l int
	_ = l
	if len(m.Places) > 0 {
		for _, e := range m.Places {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	l = len(m.NextToken)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *Place) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.PriceLevel != 0 {
		n += 1 + sovProto(uint64(m.PriceLevel))
	}
	if m.Rating != 0 {
		n += 5
	}
	l = len(m.PlaceID)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.IconURL)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	return n
}

func (m *DirectionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.DepartureTime != 0 {
		n += 1 + sovProto(uint64(m.DepartureTime))
	}
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			l = len(s)
			n += 1 + l + sovProto(uint64(l))
		}
	}
	return n
}

func (m *Directions) Size() (n int) {
	var l int
	_ = l
	if len(m.Directions) > 0 {
		for _, e := range m.Directions {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	return n
}

func (m *Direction) Size() (n int) {
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovProto(uint64(m.Duration))
	}
	return n
}

func sovProto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Places) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Places: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Places: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Places", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Places = append(m.Places, &Place{})
			if err := m.Places[len(m.Places)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Place) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Place: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Place: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceLevel", wireType)
			}
			m.PriceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartureTime", wireType)
			}
			m.DepartureTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepartureTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Directions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Directions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Directions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directions = append(m.Directions, &Direction{})
			if err := m.Directions[len(m.Directions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Direction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Direction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Direction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto.proto", fileDescriptorProto) }

var fileDescriptorProto = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x1c, 0xe7, 0xa7, 0xb9, 0x69, 0xd4, 0x68, 0xf4, 0x29, 0x72, 0xf3, 0xf5, 0x8b, 0x2a,
	0x83, 0xd4, 0x0a, 0x09, 0x5b, 0x2a, 0x2b, 0x10, 0x48, 0x08, 0x5a, 0x15, 0x44, 0x91, 0xc0, 0x04,
	0x16, 0xec, 0x26, 0xf6, 0x25, 0x1d, 0x62, 0x7b, 0xcc, 0x78, 0x1c, 0xda, 0x2d, 0xaf, 0xc0, 0x86,
	0x37, 0xe0, 0x0d, 0x78, 0x03, 0x24, 0x96, 0x48, 0xbc, 0x00, 0x2a, 0x3c, 0x08, 0x9a, 0xf1, 0xd8,
	0x31, 0x55, 0x37, 0x96, 0xcf, 0x39, 0x77, 0xee, 0x9c, 0x39, 0x73, 0x07, 0x06, 0x99, 0xe0, 0x92,
	0x7b, 0xfa, 0x4b, 0xda, 0x52, 0xb0, 0x6c, 0xf2, 0xdf, 0x82, 0xf3, 0x45, 0x8c, 0xbe, 0xe6, 0xe6,
	0xc5, 0x1b, 0x1f, 0x93, 0x4c, 0x9e, 0x97, 0x25, 0x93, 0xed, 0x90, 0x8b, 0x86, 0xd4, 0x58, 0x3d,
	0xd9, 0x31, 0xeb, 0x68, 0xc6, 0x7c, 0x9a, 0xa6, 0x5c, 0x52, 0xc9, 0x78, 0x9a, 0x97, 0xaa, 0xfb,
	0x3f, 0xf4, 0x5e, 0xa1, 0xc8, 0x19, 0x4f, 0x09, 0x81, 0x76, 0x4a, 0x13, 0x74, 0xac, 0x5d, 0x6b,
	0xbf, 0x1f, 0xe8, 0x7f, 0xf7, 0x8b, 0x05, 0x9b, 0xcf, 0x62, 0x1a, 0x62, 0x80, 0xef, 0x0a, 0xcc,
	0x25, 0x19, 0x43, 0x57, 0xd0, 0x88, 0x15, 0xb9, 0x2e, 0x1b, 0x06, 0x06, 0x91, 0x1d, 0xe8, 0x67,
	0xaa, 0x6e, 0x76, 0x9e, 0xa1, 0xd3, 0xd2, 0x1d, 0xd6, 0x04, 0x19, 0x81, 0x1d, 0xa7, 0x0b, 0xc7,
	0xde, 0xb5, 0xf6, 0xad, 0x40, 0xfd, 0x6a, 0x86, 0x4a, 0xa7, 0x6d, 0x18, 0x2a, 0xc9, 0x04, 0x36,
	0x32, 0xc1, 0x42, 0x7c, 0xca, 0x52, 0xa7, 0xa3, 0x1b, 0xd4, 0x78, 0xad, 0xd1, 0x33, 0xa7, 0xdb,
	0xd4, 0xe8, 0x19, 0xf9, 0x17, 0x3a, 0x92, 0x2f, 0x31, 0x75, 0x7a, 0x5a, 0x28, 0x81, 0xfb, 0x04,
	0xba, 0xda, 0x77, 0x4e, 0xae, 0x41, 0x57, 0x1b, 0x51, 0x8e, 0xed, 0xfd, 0xc1, 0xc1, 0xc0, 0x53,
	0x71, 0x7a, 0xe5, 0xa9, 0x8c, 0xa4, 0xec, 0xa7, 0x78, 0x26, 0x67, 0xba, 0x91, 0xb1, 0x5f, 0x13,
	0xee, 0x57, 0x0b, 0x3a, 0xba, 0xfe, 0xaa, 0x8c, 0xc8, 0x14, 0x40, 0x9b, 0x39, 0xc1, 0x15, 0xc6,
	0x7a, 0x71, 0x27, 0x68, 0x30, 0x65, 0x64, 0x92, 0x99, 0xf3, 0xb7, 0x02, 0x83, 0x88, 0x03, 0x3d,
	0xbd, 0xfb, 0xe3, 0x43, 0x1d, 0x43, 0x3f, 0xa8, 0xa0, 0x52, 0x58, 0xc8, 0xd3, 0x97, 0xc1, 0x89,
	0x49, 0xa2, 0x82, 0x4a, 0xa1, 0x51, 0x24, 0x30, 0xcf, 0x4d, 0x0e, 0x15, 0xac, 0x02, 0xed, 0xad,
	0x03, 0x35, 0xa1, 0x6f, 0xd4, 0xa1, 0xbb, 0x6f, 0x61, 0x74, 0xc8, 0x04, 0x86, 0x6a, 0x00, 0xaa,
	0x0b, 0x25, 0xd0, 0x4e, 0x78, 0x54, 0x9f, 0x48, 0xfd, 0x93, 0xeb, 0x30, 0x8c, 0x30, 0xa3, 0x42,
	0x16, 0x02, 0x67, 0x2c, 0x29, 0x2f, 0xd4, 0x0e, 0xfe, 0x26, 0x55, 0x66, 0x31, 0x0f, 0xcb, 0x69,
	0x72, 0xec, 0x5d, 0x5b, 0x65, 0x56, 0x13, 0xee, 0x3d, 0x80, 0x7a, 0xaf, 0x9c, 0xf8, 0x00, 0x51,
	0x8d, 0xcc, 0x45, 0x6c, 0x95, 0x17, 0xb1, 0x76, 0xd4, 0x28, 0x71, 0xf7, 0xa0, 0x5f, 0x0b, 0xea,
	0xfa, 0xa3, 0x42, 0xe8, 0xc6, 0xda, 0xa7, 0x1d, 0xd4, 0xf8, 0xe0, 0x73, 0x0b, 0x06, 0x33, 0xc1,
	0xb2, 0x17, 0x28, 0x56, 0x2c, 0x44, 0x72, 0x04, 0x70, 0x8c, 0xb2, 0x9a, 0xe9, 0xb1, 0x57, 0x4e,
	0xbf, 0x57, 0x3d, 0x0d, 0xef, 0x48, 0xbd, 0x9a, 0xc9, 0xb0, 0xdc, 0xdb, 0x94, 0xb9, 0xa3, 0x0f,
	0x3f, 0x7e, 0x7f, 0x6c, 0x01, 0xd9, 0xf0, 0x57, 0x66, 0xe1, 0x7d, 0x18, 0x1c, 0xb3, 0x24, 0x41,
	0x33, 0x44, 0xa4, 0x39, 0x34, 0x65, 0x72, 0x93, 0xcd, 0x06, 0x97, 0xbb, 0x5b, 0xba, 0x45, 0x9f,
	0xf4, 0x7c, 0x33, 0x52, 0xcf, 0x61, 0x78, 0x8c, 0xb2, 0x91, 0xc1, 0xf8, 0xf2, 0x79, 0x4d, 0x9f,
	0xd1, 0x25, 0x3e, 0x77, 0xc7, 0xba, 0xd7, 0xc8, 0x1d, 0xf8, 0xeb, 0x44, 0xee, 0x58, 0x37, 0xc8,
	0x5d, 0xe8, 0x3c, 0x3c, 0xc5, 0x70, 0x49, 0x1c, 0x4f, 0xbd, 0x77, 0xef, 0x11, 0xd2, 0x58, 0x9e,
	0x6a, 0xaa, 0x6a, 0xb6, 0x7d, 0x85, 0x92, 0x67, 0x3c, 0xcd, 0xf1, 0xc1, 0xed, 0x6f, 0x17, 0x53,
	0xeb, 0xfb, 0xc5, 0xd4, 0xfa, 0x79, 0x31, 0xb5, 0x3e, 0xfd, 0x9a, 0xfe, 0xf3, 0x7a, 0x6f, 0xc1,
	0xe4, 0x69, 0x31, 0xf7, 0x42, 0x9e, 0xf8, 0x0b, 0x8c, 0x59, 0x54, 0xe4, 0xfe, 0x7b, 0x9c, 0xdf,
	0x5c, 0x0a, 0xbe, 0xe4, 0x09, 0x97, 0x6c, 0x45, 0x7d, 0xe5, 0x6d, 0xde, 0xd5, 0xf1, 0xdd, 0xfa,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x60, 0x81, 0x41, 0x92, 0x97, 0x04, 0x00, 0x00,
}
